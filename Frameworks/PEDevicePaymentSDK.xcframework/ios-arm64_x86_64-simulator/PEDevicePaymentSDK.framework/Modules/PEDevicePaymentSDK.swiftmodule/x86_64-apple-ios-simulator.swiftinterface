// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name PEDevicePaymentSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CommonCrypto
import CryptoKit
import DeveloperToolsSupport
import Dispatch
import Foundation
import Network
import OSLog
@_exported import PEDevicePaymentSDK
import ProximityReader
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
@objc public class TerminalInfo : ObjectiveC.NSObject, Swift.Codable {
  final public let deviceId: Swift.String
  final public let merchantId: Swift.String
  final public let merchantName: Swift.String
  final public let terminalFriendlyName: Swift.String
  public var sdkVersion: Swift.String {
    get
  }
  @objc public init(deviceId: Swift.String, merchantId: Swift.String, merchantName: Swift.String, terminalFriendlyName: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum IDType : Swift.Int {
  case PE_MID
  case PROCESSOR_MID
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEDeviceDelegate {
  @objc func onDeviceSelected(device: any PEDevicePaymentSDK.PEDevice)
  @objc optional func onActivationProgress(device: any PEDevicePaymentSDK.PEDevice, completed: Swift.Int)
  @objc func onConnected(device: any PEDevicePaymentSDK.PEDevice)
  @objc func onConnectionFailed(device: any PEDevicePaymentSDK.PEDevice, error: any Swift.Error)
  @objc optional func onCardRead(success: Swift.Bool)
  @objc optional func onDiscoveringDevice(_ searching: Swift.Bool)
  @objc optional func onDeviceDiscovered(_ device: PEDevicePaymentSDK.DiscoverableDevice)
  @objc optional func onLcdConfirmation(_ message: Swift.String)
  @objc optional func onLcdMessage(_ message: Swift.String)
  @objc optional func didStartTransaction(_ request: PEDevicePaymentSDK.PEPaymentRequest)
  @objc optional func didStartAuthorization(_ request: PEDevicePaymentSDK.PEPaymentRequest)
  @objc func onTransactionCompleted(transaction: any PEDevicePaymentSDK.PEPaymentResult)
  @objc func onTransactionFailed(transaction: any PEDevicePaymentSDK.PEPaymentResult)
}
@objc public protocol PEInitializationDelegate {
  @objc func onInitialized(availableDevices: [any PEDevicePaymentSDK.PEDevice])
  @objc func onInitFailed(error: any Swift.Error)
  @objc optional func onActivationRequired(activationCode: Swift.String)
  @objc optional func onActivationStarting(terminalInfo: PEDevicePaymentSDK.TerminalInfo)
  @objc optional func willLaunchEducationalScreen()
  @objc optional func didLaunchEducationalScreen()
  @objc optional func onEducationScreenDismissed()
  @objc func onDeinitialized()
}
@_hasMissingDesignatedInitializers @objc public class PEPaymentRequest : ObjectiveC.NSObject, Swift.Codable {
  final public let transactionAmount: Foundation.Decimal
  final public let currencyCode: Swift.String
  public var transactionData: PEDevicePaymentSDK.PEJSON?
  public init(transactionAmount: Foundation.Decimal, transactionData: PEDevicePaymentSDK.PEJSON? = nil, currencyCode: Swift.String = "USD")
  public init(transactionType: PEDevicePaymentSDK.PETransactionType, transactionAmount: Foundation.Decimal, originalTransactionId: Swift.String, transactionData: PEDevicePaymentSDK.PEJSON? = nil, currencyCode: Swift.String = "USD")
  @objc public init(transactionAmount: Foundation.Decimal, currencyCode: Swift.String = "USD")
  @objc public init(transactionType: PEDevicePaymentSDK.PETransactionType, transactionAmount: Foundation.Decimal, originalTransactionId: Swift.String, currencyCode: Swift.String = "USD")
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum TransactionMode : Swift.Int {
  case all = 0
  case companion = 1
  case device = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_documentation(visibility: private) public enum LcdSelection : Swift.Codable {
  case OK
  case Cancel
  public static func == (a: PEDevicePaymentSDK.LcdSelection, b: PEDevicePaymentSDK.LcdSelection) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @_documentation(visibility: private) @objc public class LcdOption : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class PEEnvironment : ObjectiveC.NSObject {
  @objc public static let Production: any PEDevicePaymentSDK.IPEEnvironment
  @objc public static let Sandbox: any PEDevicePaymentSDK.IPEEnvironment
  @objc public static let Test: any PEDevicePaymentSDK.IPEEnvironment
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PETransactionResultViewController : ObjectiveC.NSObject {
  public init(onDismissed: @escaping () -> Swift.Void)
  @objc deinit
}
@objc public protocol PEDevice {
  @objc var deviceType: PEDevicePaymentSDK.DeviceType { get }
  @objc var deviceId: Swift.String? { get }
  @objc var connected: Swift.Bool { get }
  @objc @available(*, deprecated, message: "license is no longer needed. Use initialize(id:idType:mode:delegate:)")
  func initialize(license: Swift.String?, id: Swift.String?, idType: PEDevicePaymentSDK.IDType, mode: PEDevicePaymentSDK.TransactionMode, delegate: any PEDevicePaymentSDK.PEInitializationDelegate)
  @objc func initialize(id: Swift.String?, idType: PEDevicePaymentSDK.IDType, mode: PEDevicePaymentSDK.TransactionMode, delegate: any PEDevicePaymentSDK.PEInitializationDelegate)
  @objc func connect(delegate: any PEDevicePaymentSDK.PEDeviceDelegate)
  @objc func deinitialize()
  @objc func startTransaction(request: PEDevicePaymentSDK.PEPaymentRequest, transactionResultViewController: PEDevicePaymentSDK.PETransactionResultViewController?)
  @objc func cancelTransaction()
  @objc func selectDevice(device: PEDevicePaymentSDK.DiscoverableDevice)
  @objc func selectLcdOption(value: Swift.UInt8)
}
@objc public class GetTransactionsResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct PEConfig {
  public let environment: any PEDevicePaymentSDK.IPEEnvironment
  public let merchantId: Swift.String?
  public init(environment: any PEDevicePaymentSDK.IPEEnvironment, merchantId: Swift.String?)
}
@_documentation(visibility: private) public enum PEJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidPEJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PEDevicePaymentSDK.PEJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@_documentation(visibility: private) public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct PEJSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parsePEJSON jsonString: Swift.String)
  public mutating func merge(with other: PEDevicePaymentSDK.PEJSON) throws
  public func merged(with other: PEDevicePaymentSDK.PEJSON) throws -> PEDevicePaymentSDK.PEJSON
  public var type: PEDevicePaymentSDK.`Type` {
    get
  }
  public var error: PEDevicePaymentSDK.PEJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullPEJSON: PEDevicePaymentSDK.PEJSON {
    get
  }
  public static var null: PEDevicePaymentSDK.PEJSON {
    get
  }
}
@_documentation(visibility: private) public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: PEDevicePaymentSDK.Index<T>, rhs: PEDevicePaymentSDK.Index<T>) -> Swift.Bool
  public static func < (lhs: PEDevicePaymentSDK.Index<T>, rhs: PEDevicePaymentSDK.Index<T>) -> Swift.Bool
}
@_documentation(visibility: private) public typealias PEJSONIndex = PEDevicePaymentSDK.Index<PEDevicePaymentSDK.PEJSON>
@_documentation(visibility: private) public typealias PEJSONRawIndex = PEDevicePaymentSDK.Index<Any>
extension PEDevicePaymentSDK.PEJSON : Swift.Collection {
  public typealias Index = PEDevicePaymentSDK.PEJSONRawIndex
  public var startIndex: PEDevicePaymentSDK.PEJSON.Index {
    get
  }
  public var endIndex: PEDevicePaymentSDK.PEJSON.Index {
    get
  }
  public func index(after i: PEDevicePaymentSDK.PEJSON.Index) -> PEDevicePaymentSDK.PEJSON.Index
  public subscript(position: PEDevicePaymentSDK.PEJSON.Index) -> (Swift.String, PEDevicePaymentSDK.PEJSON) {
    get
  }
  public typealias Element = (Swift.String, PEDevicePaymentSDK.PEJSON)
  public typealias Indices = Swift.DefaultIndices<PEDevicePaymentSDK.PEJSON>
  public typealias Iterator = Swift.IndexingIterator<PEDevicePaymentSDK.PEJSON>
  public typealias SubSequence = Swift.Slice<PEDevicePaymentSDK.PEJSON>
}
@_documentation(visibility: private) public enum PEJSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
@_documentation(visibility: private) public protocol PEJSONSubscriptType {
  var jsonKey: PEDevicePaymentSDK.PEJSONKey { get }
}
extension Swift.Int : PEDevicePaymentSDK.PEJSONSubscriptType {
  public var jsonKey: PEDevicePaymentSDK.PEJSONKey {
    get
  }
}
extension Swift.String : PEDevicePaymentSDK.PEJSONSubscriptType {
  public var jsonKey: PEDevicePaymentSDK.PEJSONKey {
    get
  }
}
extension PEDevicePaymentSDK.PEJSON {
  public subscript(path: [any PEDevicePaymentSDK.PEJSONSubscriptType]) -> PEDevicePaymentSDK.PEJSON {
    get
    set
  }
  public subscript(path: any PEDevicePaymentSDK.PEJSONSubscriptType...) -> PEDevicePaymentSDK.PEJSON {
    get
    set
  }
}
extension PEDevicePaymentSDK.PEJSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension PEDevicePaymentSDK.PEJSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension PEDevicePaymentSDK.PEJSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension PEDevicePaymentSDK.PEJSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension PEDevicePaymentSDK.PEJSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension PEDevicePaymentSDK.PEJSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension PEDevicePaymentSDK.PEJSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [PEDevicePaymentSDK.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension PEDevicePaymentSDK.PEJSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension PEDevicePaymentSDK.PEJSON {
  public var array: [PEDevicePaymentSDK.PEJSON]? {
    get
  }
  public var arrayValue: [PEDevicePaymentSDK.PEJSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension PEDevicePaymentSDK.PEJSON {
  public var dictionary: [Swift.String : PEDevicePaymentSDK.PEJSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : PEDevicePaymentSDK.PEJSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension PEDevicePaymentSDK.PEJSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension PEDevicePaymentSDK.PEJSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension PEDevicePaymentSDK.PEJSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension PEDevicePaymentSDK.PEJSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension PEDevicePaymentSDK.PEJSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension PEDevicePaymentSDK.PEJSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension PEDevicePaymentSDK.PEJSON : Swift.Comparable {
}
@_documentation(visibility: private) public func == (lhs: PEDevicePaymentSDK.PEJSON, rhs: PEDevicePaymentSDK.PEJSON) -> Swift.Bool
@_documentation(visibility: private) public func <= (lhs: PEDevicePaymentSDK.PEJSON, rhs: PEDevicePaymentSDK.PEJSON) -> Swift.Bool
@_documentation(visibility: private) public func >= (lhs: PEDevicePaymentSDK.PEJSON, rhs: PEDevicePaymentSDK.PEJSON) -> Swift.Bool
@_documentation(visibility: private) public func > (lhs: PEDevicePaymentSDK.PEJSON, rhs: PEDevicePaymentSDK.PEJSON) -> Swift.Bool
@_documentation(visibility: private) public func < (lhs: PEDevicePaymentSDK.PEJSON, rhs: PEDevicePaymentSDK.PEJSON) -> Swift.Bool
@_documentation(visibility: private) public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: PEDevicePaymentSDK.writingOptionsKeys, b: PEDevicePaymentSDK.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PEDevicePaymentSDK.PEJSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public protocol IPEEnvironment {
  @objc var socketHostname: Swift.String { get }
  @objc var apiHostname: Swift.String { get }
  @objc optional func getCustomClientCertificate() -> Foundation.NSData?
}
@objc @objcMembers public class PaymentResult : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let data: PEDevicePaymentSDK.PaymentResultData?
  final public let error: Swift.Bool?
  @objc final public let message: Swift.String?
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class PaymentResultData : ObjectiveC.NSObject, Swift.Decodable {
  @objc final public let ID: Swift.String
  @objc final public let MerchantID: Swift.String
  @objc final public let TransactionID: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class PaymentResultHostReport : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let status: Swift.String
  @objc final public let responseCode: Swift.String
  @objc final public let responseMessage: Swift.String
  @objc final public let authCode: Swift.String?
  @objc final public let addressVerificationCode: Swift.String?
  @objc final public let cardHolderVerificationCode: Swift.String?
  @objc final public let cardType: Swift.String?
  @objc final public let maskedCardNumber: Swift.String?
  @objc final public let transactionTimestamp: Swift.String?
  @objc final public let transactionID: Swift.String?
  @objc final public let hostReferenceNumber: Swift.String?
  @objc final public let transactionAmount: Swift.String
  @objc final public let processedAmount: Swift.String
  @objc public var currencyCode: Swift.String?
  @objc final public let issuerResponseCode: Swift.String?
  @objc final public let iccARPC: Swift.String?
  @objc final public let iccIssuerScript: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum PEError : Swift.Error {
  case invalidMID(code: Swift.Int = 0, message: Swift.String = "Invalid MID")
  case disconnectError(code: Swift.Int = 1, message: Swift.String = "Disconnected from server")
  case versionNotSupported(code: Swift.Int = 2, message: Swift.String = "Only iOS 17 and above is supported")
  case paymentCardError(code: Swift.Int = 3, message: Swift.String = "Payment Card Reader Error")
  case initializationError(code: Swift.Int = 4, message: Swift.String = "Initialization failed")
  case unsupportedDeviceError(code: Swift.Int = 5, message: Swift.String = "Device type not supported")
  case usbUnrecognizedError(code: Swift.Int = 6, message: Swift.String = "Unable to recognize USB device")
  case connectTimeoutError(code: Swift.Int = 7, message: Swift.String = "Timed out connecting to device")
  case notConnectedError(code: Swift.Int = 8, message: Swift.String = "No device connected")
  case noCurrentActiveTransaction(code: Swift.Int = 9, message: Swift.String = "No current active transaction")
  case transactionNotAllowed(code: Swift.Int = 10, message: Swift.String = "Transaction is not allowed")
  case cardReaderError(error: ProximityReader.PaymentCardReaderError)
  case parameterError(code: Swift.Int, message: Swift.String)
  case common(message: Swift.String)
  case deactivated(message: Swift.String, activationCode: Swift.String)
}
extension PEDevicePaymentSDK.PEError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc public enum DeviceType : Swift.Int, Swift.Decodable, Swift.Encodable {
  case BT
  case USB
  case MOBILE
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.Encodable {
  public func toJSON() -> Swift.String?
}
@_hasMissingDesignatedInitializers @objc public class DiscoverableDevice : ObjectiveC.NSObject, Swift.Decodable {
  final public let id: Swift.String
  final public let name: Swift.String
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol PEPaymentResult {
  @objc var transactionType: PEDevicePaymentSDK.PETransactionType { get set }
  @objc var isSuccess: Swift.Bool { get }
  @objc var transactionId: Swift.String? { get }
  @objc var responseCode: Swift.String? { get }
  @objc var responseMessage: Swift.String? { get }
  @objc var amount: Swift.String? { get }
  @objc var currencyCode: Swift.String? { get }
  @objc var hostReport: PEDevicePaymentSDK.PaymentResultHostReport? { get }
  @objc var error: PEDevicePaymentSDK.PECardReaderError? { get }
}
@_hasMissingDesignatedInitializers @objc public class PECardReaderError : ObjectiveC.NSObject, Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
  public var errorCode: Swift.String {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PEPaymentDevice : ObjectiveC.NSObject, PEDevicePaymentSDK.PEDevice {
  @objc public var deviceId: Swift.String? {
    @objc get
  }
  @objc public var connected: Swift.Bool {
    @objc get
  }
  @objc public static var shared: PEDevicePaymentSDK.PEPaymentDevice
  @objc public static var environment: any PEDevicePaymentSDK.IPEEnvironment
  @objc public var deviceType: PEDevicePaymentSDK.DeviceType
  @objc public func initialize(id: Swift.String? = nil, idType: PEDevicePaymentSDK.IDType = .PE_MID, mode: PEDevicePaymentSDK.TransactionMode = .device, delegate: any PEDevicePaymentSDK.PEInitializationDelegate)
  @available(*, deprecated, message: "license is no longer needed. Use initialize(id:idType:mode:delegate:)")
  @objc public func initialize(license: Swift.String?, id: Swift.String? = nil, idType: PEDevicePaymentSDK.IDType = .PE_MID, mode: PEDevicePaymentSDK.TransactionMode = .device, delegate: any PEDevicePaymentSDK.PEInitializationDelegate)
  @objc public func connect(delegate: any PEDevicePaymentSDK.PEDeviceDelegate)
  @objc public func connect(device: any PEDevicePaymentSDK.PEDevice, delegate: any PEDevicePaymentSDK.PEDeviceDelegate)
  @objc public func deinitialize()
  @objc public func selectDevice(device: PEDevicePaymentSDK.DiscoverableDevice)
  @objc public func selectLcdOption(value: Swift.UInt8)
  @objc public func startTransaction(request: PEDevicePaymentSDK.PEPaymentRequest, transactionResultViewController: PEDevicePaymentSDK.PETransactionResultViewController?)
  @objc public func cancelTransaction()
  @objc public func getTransactions(page: Swift.Int = 1, queryParams: [Swift.String : Swift.String] = [:]) throws -> PEDevicePaymentSDK.GetTransactionsResponse
  @objc public static var versionNumber: Swift.String {
    @objc get
  }
  @objc public static func showMerchantTutorial()
  @objc public static func blockIncomingTransaction(_ block: Swift.Bool)
  @_documentation(visibility: private) @objc public static func uploadFCMToken(token: Swift.String)
  @_documentation(visibility: private) @objc public static func clearData()
  @objc deinit
}
extension PEDevicePaymentSDK.PEPaymentDevice : PEDevicePaymentSDK.PEInitializationDelegate {
  @objc dynamic public func onInitialized(availableDevices: [any PEDevicePaymentSDK.PEDevice])
  @objc dynamic public func onInitFailed(error: any Swift.Error)
  @objc dynamic public func onActivationRequired(activationCode: Swift.String)
  @objc dynamic public func onActivationStarting(terminalInfo: PEDevicePaymentSDK.TerminalInfo)
  @objc dynamic public func willLaunchEducationalScreen()
  @objc dynamic public func didLaunchEducationalScreen()
  @objc dynamic public func onEducationScreenDismissed()
  @objc dynamic public func onDeinitialized()
}
extension PEDevicePaymentSDK.PEPaymentDevice : PEDevicePaymentSDK.PEDeviceDelegate {
  @objc dynamic public func onDeviceSelected(device: any PEDevicePaymentSDK.PEDevice)
  @objc dynamic public func onActivationProgress(device: any PEDevicePaymentSDK.PEDevice, completed: Swift.Int)
  @objc dynamic public func onConnected(device: any PEDevicePaymentSDK.PEDevice)
  @objc dynamic public func onConnectionFailed(device: any PEDevicePaymentSDK.PEDevice, error: any Swift.Error)
  @objc dynamic public func onCardRead(success: Swift.Bool)
  @objc dynamic public func onDiscoveringDevice(_ searching: Swift.Bool)
  @objc dynamic public func onDeviceDiscovered(_ device: PEDevicePaymentSDK.DiscoverableDevice)
  @objc dynamic public func onLcdConfirmation(_ message: Swift.String)
  @objc dynamic public func onLcdMessage(_ message: Swift.String)
  @objc dynamic public func didStartTransaction(_ request: PEDevicePaymentSDK.PEPaymentRequest)
  @objc dynamic public func didStartAuthorization(_ request: PEDevicePaymentSDK.PEPaymentRequest)
  @objc dynamic public func onTransactionCompleted(transaction: any PEDevicePaymentSDK.PEPaymentResult)
  @objc dynamic public func onTransactionFailed(transaction: any PEDevicePaymentSDK.PEPaymentResult)
}
@objc public enum PETransactionType : Swift.Int, Swift.Codable {
  case SALE = 1
  case REFUND = 5
  case VOID = 6
  case VERIFICATION = 7
  case BALANCE = 8
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PEDevicePaymentSDK.IDType : Swift.Equatable {}
extension PEDevicePaymentSDK.IDType : Swift.Hashable {}
extension PEDevicePaymentSDK.IDType : Swift.RawRepresentable {}
extension PEDevicePaymentSDK.TransactionMode : Swift.Equatable {}
extension PEDevicePaymentSDK.TransactionMode : Swift.Hashable {}
extension PEDevicePaymentSDK.TransactionMode : Swift.RawRepresentable {}
extension PEDevicePaymentSDK.LcdSelection : Swift.Equatable {}
extension PEDevicePaymentSDK.LcdSelection : Swift.Hashable {}
extension PEDevicePaymentSDK.PEJSONError : Swift.Equatable {}
extension PEDevicePaymentSDK.PEJSONError : Swift.Hashable {}
extension PEDevicePaymentSDK.PEJSONError : Swift.RawRepresentable {}
extension PEDevicePaymentSDK.`Type` : Swift.Equatable {}
extension PEDevicePaymentSDK.`Type` : Swift.Hashable {}
extension PEDevicePaymentSDK.`Type` : Swift.RawRepresentable {}
extension PEDevicePaymentSDK.writingOptionsKeys : Swift.Equatable {}
extension PEDevicePaymentSDK.writingOptionsKeys : Swift.Hashable {}
extension PEDevicePaymentSDK.DeviceType : Swift.Equatable {}
extension PEDevicePaymentSDK.DeviceType : Swift.Hashable {}
extension PEDevicePaymentSDK.DeviceType : Swift.RawRepresentable {}
extension PEDevicePaymentSDK.PETransactionType : Swift.Equatable {}
extension PEDevicePaymentSDK.PETransactionType : Swift.Hashable {}
extension PEDevicePaymentSDK.PETransactionType : Swift.RawRepresentable {}
