#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef PEDEVICEPAYMENTSDK_SWIFT_H
#define PEDEVICEPAYMENTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PEDevicePaymentSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// An enum representing the different types of payment devices.
/// This enum provides cases for Bluetooth, USB, and Tap To Pay devices.
typedef SWIFT_ENUM(NSInteger, DeviceType, open) {
/// A Bluetooth payment device.
  DeviceTypeBT = 0,
/// A USB payment device.
  DeviceTypeUSB = 1,
/// A Tap To Pay payment device.
  DeviceTypeMOBILE = 2,
};


/// Represents a discoverable payment device that can be connected to.
/// This class contains basic information about a device that has been discovered
/// during the device scanning process.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK18DiscoverableDevice")
@interface DiscoverableDevice : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the response structure for fetching transactions
/// note:
/// This class conforms to <code>NSObject</code>, <code>Codable</code> for Objective-C compatibility and JSON encoding/decoding
SWIFT_CLASS("_TtC18PEDevicePaymentSDK23GetTransactionsResponse")
@interface GetTransactionsResponse : NSObject
@end

/// An enum representing the different types of IDs used for payment processing.
/// This enum provides cases for PayEngine Merchant ID, NMI Security Key, and Processor Merchant ID.
typedef SWIFT_ENUM(NSInteger, IDType, open) {
/// A PayEngine Merchant ID.
  IDTypePE_MID = 0,
/// A Processor Merchant ID.
  IDTypePROCESSOR_MID = 1,
};

@class NSString;
@class NSData;

SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK14IPEEnvironment_")
@protocol IPEEnvironment
@property (nonatomic, readonly, copy) NSString * _Nonnull socketHostname;
@property (nonatomic, readonly, copy) NSString * _Nonnull apiHostname;
@optional
- (NSData * _Nullable)getCustomClientCertificate SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents an LCD display option with selection type and display text
SWIFT_CLASS("_TtC18PEDevicePaymentSDK9LcdOption")
@interface LcdOption : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Represents errors that occur during card reader operations
SWIFT_CLASS("_TtC18PEDevicePaymentSDK17PECardReaderError")
@interface PECardReaderError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TransactionMode : NSInteger;
@protocol PEInitializationDelegate;
@protocol PEDeviceDelegate;
@class PEPaymentRequest;
@class PETransactionResultViewController;

/// A protocol defining the interface for a payment device.
/// This protocol provides methods for initializing, connecting, and interacting with a payment device.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK8PEDevice_")
@protocol PEDevice
/// The type of payment device (e.g., TTP, Bluetooth, USB)
@property (nonatomic, readonly) enum DeviceType deviceType;
/// Unique identifier for the connected device once it’s connected to the backend
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
/// Indicates whether the device is currently connected
@property (nonatomic, readonly) BOOL connected;
/// Initializes device instance.
/// Establishes a connection between the app and PayEngine System by performing the following steps:
/// <ol>
///   <li>
///     Checks if the Merchant ID (MID) and device are correctly paired. If paired, proceeds to step 3; otherwise, proceeds to step 2.
///   </li>
///   <li>
///     Either generates an error (e.g., if the wrong MID is provided) or pairs the device by automatically pairing or providing an activation code to the merchant.
///   </li>
///   <li>
///     Initializes the correct device type (TTP, BT, or USB).
///   </li>
///   <li>
///     Selects the correct device and establishes a connection.
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     license: <em>Deprecated</em> License string obtained from PayEngine support.
///   </li>
///   <li>
///     id: Merchant ID.
///   </li>
///   <li>
///     idType: Merchant ID type.
///   </li>
///   <li>
///     mode: Transaction mode.
///   </li>
///   <li>
///     autoConnect:
///   </li>
///   <li>
///     delegate: Delegate to receive initialization callbacks.
///   </li>
/// </ul>
- (void)initializeWithLicense:(NSString * _Nullable)license id:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("license is no longer needed. Use initialize(id:idType:mode:delegate:)");
/// Initializes device instance.
/// Establishes a connection between the app and PayEngine System by performing the following steps:
/// <ol>
///   <li>
///     Checks if the Merchant ID (MID) and device are correctly paired. If paired, proceeds to step 3; otherwise, proceeds to step 2.
///   </li>
///   <li>
///     Either generates an error (e.g., if the wrong MID is provided) or pairs the device by automatically pairing or providing an activation code to the merchant.
///   </li>
///   <li>
///     Initializes the correct device type (TTP, BT, or USB).
///   </li>
///   <li>
///     Selects the correct device and establishes a connection.
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     id: Merchant ID.
///   </li>
///   <li>
///     idType: Merchant ID type.
///   </li>
///   <li>
///     mode: Transaction mode.
///   </li>
///   <li>
///     autoConnect:
///   </li>
///   <li>
///     delegate: Delegate to receive initialization callbacks.
///   </li>
/// </ul>
- (void)initializeWithId:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate;
/// <code>connect</code> method’s main job is to initiate the connection between the app and chosen device type.
/// Generally this will prepare the terminal TTP or BT/USB device to be ready for transaction processing.
/// \param delegate Delegate to receive initialization callbacks.
///
- (void)connectWithDelegate:(id <PEDeviceDelegate> _Nonnull)delegate;
- (void)deinitialize;
/// Start a new Transaction
/// <code>startTransaction</code> method’s purpose is to start the transaction whether through a push or an in app request
/// \param request Payment Request
///
/// \param transactionResultViewController A result handler used to receive a callback when a transaction result is dismissed.
///
- (void)startTransactionWithRequest:(PEPaymentRequest * _Nonnull)request transactionResultViewController:(PETransactionResultViewController * _Nullable)transactionResultViewController;
/// Cancel the currently active transaction
- (void)cancelTransaction;
/// Select a nearby device
/// <code>selectDevice</code> method is to select and connect to a device
/// <ul>
///   <li>
///     Parameter
///     <ul>
///       <li>
///         device: DiscoverableDevice
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)selectDeviceWithDevice:(DiscoverableDevice * _Nonnull)device;
- (void)selectLcdOptionWithValue:(uint8_t)value;
@end

@protocol PEPaymentResult;

/// The <code>PEDeviceDelegate</code> interface defines the protocol that a delegate class must adopt to receive messages related to transaction processing from devices. This interface is essential for classes that manage communication and interaction with transaction processing devices, enabling them to respond appropriately to various device events and states, such as transaction progress, errors, and completion.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK16PEDeviceDelegate_")
@protocol PEDeviceDelegate
/// The <code>onDeviceSelected</code> delegate callback is triggered when a device is selected
/// \param device Selected device
///
- (void)onDeviceSelectedWithDevice:(id <PEDevice> _Nonnull)device;
@optional
/// The <code>onActivationProgress</code> method is a delegate callback used to inform the delegate about the progress of a device activation process.
/// \param device Selected device
///
/// \param completed Percent completed
///
- (void)onActivationProgressWithDevice:(id <PEDevice> _Nonnull)device completed:(NSInteger)completed;
@required
/// The <code>onConnected</code> method is a delegate callback is invoked when a device is connected
/// \param device connected device
///
- (void)onConnectedWithDevice:(id <PEDevice> _Nonnull)device;
/// The <code>onConnectionFailed</code> method is a delegate callback to notify the delegate about connection errors
/// \param device Selected device
///
/// \param error Connection error
///
- (void)onConnectionFailedWithDevice:(id <PEDevice> _Nonnull)device error:(NSError * _Nonnull)error;
@optional
/// <code>onCardRead</code> callback notifies the delegate about the card read operation success or failure
/// \param success True if the card reader operation is completed successfully. False otherwise
///
- (void)onCardReadWithSuccess:(BOOL)success;
/// <code>onDiscoveringDevice</code> is a delegate callback that notifies the device when BT device search starts and end
/// \param searching True when searching, false otherwise
///
- (void)onDiscoveringDevice:(BOOL)searching;
/// <code>onDeviceDiscovered</code> is triggered when a device is discovered during search
/// \param device Discovered device
///
- (void)onDeviceDiscovered:(DiscoverableDevice * _Nonnull)device;
/// <code>onLcdConfirmation</code> is a delegate callback
/// \param message message
///
- (void)onLcdConfirmation:(NSString * _Nonnull)message;
/// <code>onLcdMessage</code> message delegate callback is a method that is used to notify delegate about the LCD message from device
/// \param message message
///
- (void)onLcdMessage:(NSString * _Nonnull)message;
/// <code>didStartTransaction</code> is a delegate callback to notify the delegate when a transaction request received
- (void)didStartTransaction:(PEPaymentRequest * _Nonnull)request;
/// <code>didStartAuthorization</code> is a delegate callback to notify the delegate when a transaction authorization begins
- (void)didStartAuthorization:(PEPaymentRequest * _Nonnull)request;
@required
/// <code>onTransactionCompleted</code> is a delegate callback to notify the delegate when a transaction processing is completed
/// \param transaction Completed Transaction <code>PEPaymentResult</code>
///
- (void)onTransactionCompletedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
/// <code>onTransactionFailed</code> is delegate callback that is invoked to report back any transaction processing error.
/// \param transaction Failed Transaction <code>PEPaymentResult</code>
///
- (void)onTransactionFailedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
@end


/// A class representing different environments for an application.
/// This class provides a set of predefined environments, including Production, Sandbox, and Test.
/// Each environment conforms to the <code>IPEEnvironment</code> protocol, ensuring consistency across different environments.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK13PEEnvironment")
@interface PEEnvironment : NSObject
/// Representing the production environment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <IPEEnvironment> _Nonnull Production;)
+ (id <IPEEnvironment> _Nonnull)Production SWIFT_WARN_UNUSED_RESULT;
/// Representing the sandbox environment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <IPEEnvironment> _Nonnull Sandbox;)
+ (id <IPEEnvironment> _Nonnull)Sandbox SWIFT_WARN_UNUSED_RESULT;
/// Representing the test environment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <IPEEnvironment> _Nonnull Test;)
+ (id <IPEEnvironment> _Nonnull)Test SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TerminalInfo;

/// The <code>PEInitializationDelegate</code> interface defines a core set of callbacks that are invoked to notify the delegate about the progress and completion of application initialization and activation processes.
/// This interface is crucial for classes that need to respond to the application’s lifecycle events, such as setup completion, activation, and potential errors that may occur during the initialization phase.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK24PEInitializationDelegate_")
@protocol PEInitializationDelegate
/// <code>onInitialized</code> callback is used to notify delegate about the initialization completed with list of available device interfaces
/// \param availableDevices Available devices (e.g. Apple Tap to Pay on iPhone or  IDTech USB and Bluetooth devices
///
- (void)onInitializedWithAvailableDevices:(NSArray<id <PEDevice>> * _Nonnull)availableDevices;
/// <code>onInitFailed</code> Notifies the delegate about initialization failures
/// \param error Error description of the failure.
///
- (void)onInitFailedWithError:(NSError * _Nonnull)error;
@optional
/// <code>onActivationRequired</code> is triggered to notify the delegate that application activation is required before any available device interfaces can be used to process payment
/// \param activationCode Activation Code
///
- (void)onActivationRequiredWithActivationCode:(NSString * _Nonnull)activationCode;
/// <code>onActivationStarting</code> is triggered when the activation process is about to start
/// \param terminalInfo <code>TerminalInfo</code> Registered terminal info. Provide terminal information generally for display purposes.
///
- (void)onActivationStartingWithTerminalInfo:(TerminalInfo * _Nonnull)terminalInfo;
/// Notifies when educational screens will be presented to merchant
- (void)willLaunchEducationalScreen;
/// Notifies when educations screens have been presented to merchant
- (void)didLaunchEducationalScreen;
/// When educational screens have been dismissed
- (void)onEducationScreenDismissed;
@required
/// Gets invoked once the sdk has been successfully deinitialized
- (void)onDeinitialized;
@end


/// <code>PEPaymentDevice</code> is the core class for handling payment device interactions in the PayEngine SDK.
/// This class provides:
/// <ul>
///   <li>
///     Device connection management
///   </li>
///   <li>
///     Transaction processing (sales, refunds, voids, etc.)
///   </li>
///   <li>
///     Device initialization and configuration
///   </li>
///   <li>
///     Error handling and event delegation
///   </li>
/// </ul>
/// <h2>Key Features</h2>
/// <h3>Device Management</h3>
/// <ul>
///   <li>
///     Supports multiple device types (mobile, BT, USB)
///   </li>
///   <li>
///     Handles device discovery and selection
///   </li>
///   <li>
///     Manages device connections and disconnections
///   </li>
/// </ul>
/// <h3>Transaction Processing</h3>
/// <ul>
///   <li>
///     Supports various transaction types:
///     <ul>
///       <li>
///         Sale
///       </li>
///       <li>
///         Refund
///       </li>
///       <li>
///         Void
///       </li>
///       <li>
///         Balance Inquiry
///       </li>
///       <li>
///         Verification
///       </li>
///     </ul>
///   </li>
///   <li>
///     Handles transaction lifecycle from start to completion
///   </li>
///   <li>
///     Provides real-time transaction status updates
///   </li>
/// </ul>
/// <h3>Error Handling</h3>
/// <ul>
///   <li>
///     Comprehensive error reporting through delegates
///   </li>
///   <li>
///     Automatic reconnection attempts
///   </li>
///   <li>
///     Error message parsing and translation
///   </li>
/// </ul>
/// <h3>Delegates</h3>
/// <ul>
///   <li>
///     <code>PEInitializationDelegate</code> for initialization callbacks
///   </li>
///   <li>
///     <code>PEDeviceDelegate</code> for device and transaction events
///   </li>
/// </ul>
/// <h2>Usage Example</h2>
/// \code
/// // Initialize the payment device
/// PEPaymentDevice.shared.initialize(id: "MERCHANT_ID", 
///                                 idType: .PE_MID, 
///                                 delegate: self)
///
/// // Connect to a device
/// PEPaymentDevice.shared.connect(delegate: self)
///
/// // Start a sale transaction
/// let request = PEPaymentRequest(transactionAmount: 10.00, 
///                              currencyCode: "USD", 
///                              type: .SALE)
///
/// PEPaymentDevice.shared.startTransaction(request: request)
///
/// \endcode<h2>Important Notes</h2>
/// seealso:
/// <code>PEDevice</code>, <code>PEInitializationDelegate</code>, <code>PEDeviceDelegate</code>
/// <ul>
///   <li>
///     The class is implemented as a singleton (<code>shared</code> instance)
///   </li>
///   <li>
///     All operations should be performed on the main thread
///   </li>
///   <li>
///     Device connections are automatically managed
///   </li>
///   <li>
///     Transactions can be blocked using <code>blockIncomingTransaction(_:)</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18PEDevicePaymentSDK15PEPaymentDevice")
@interface PEPaymentDevice : NSObject <PEDevice>
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
@property (nonatomic, readonly) BOOL connected;
/// Shared instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PEPaymentDevice * _Nonnull shared;)
+ (PEPaymentDevice * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(PEPaymentDevice * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <IPEEnvironment> _Nonnull environment;)
+ (id <IPEEnvironment> _Nonnull)environment SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnvironment:(id <IPEEnvironment> _Nonnull)value;
@property (nonatomic) enum DeviceType deviceType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes device instance
/// \param id Merchant ID
///
/// \param idType Merchant ID type
///
/// \param mode Companion mode whether the transaction is allowed to initiated via API or just from device
///
/// \param delegate Delegate to receive initialization callbacks
///
- (void)initializeWithId:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate;
/// Initializes device instance
/// \param license License string obtained from PayEngine support
///
/// \param id Merchant ID
///
/// \param idType Merchant ID type
///
/// \param mode Companion mode whether the transaction is allowed to initiated via API or just from device
///
/// \param delegate Delegate to receive initialization callbacks
///
- (void)initializeWithLicense:(NSString * _Nullable)license id:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("license is no longer needed. Use initialize(id:idType:mode:delegate:)");
- (void)connectWithDelegate:(id <PEDeviceDelegate> _Nonnull)delegate;
/// Connect to the specific device type
/// \param device Selected device
///
/// \param delegate Device delegate
///
- (void)connectWithDevice:(id <PEDevice> _Nonnull)device delegate:(id <PEDeviceDelegate> _Nonnull)delegate;
/// Deinitializes the SDK, disconnects connected devices, and resets internal state.
/// This method releases all allocated resources, disconnects from the active socket,
/// deinitializes connected devices, and resets the SDK to an uninitialized state.
/// After cleanup, it invokes <code>PEInitializationDelegate/onDeinitialized()</code> and nullifies related delegates.
- (void)deinitialize;
- (void)selectDeviceWithDevice:(DiscoverableDevice * _Nonnull)device;
- (void)selectLcdOptionWithValue:(uint8_t)value;
/// Starts a new payment transaction using the provided request.
/// This method initiates the transaction flow based on the type specified in the <code>PEPaymentRequest</code>,
/// such as sale, refund, verification, or balance inquiry. The transaction is processed using the
/// currently connected device.
/// \param request The payment request containing transaction details.
///
/// \param transactionResultViewController An optional result handler object that, if provided,
/// will be used to handle the completion of the transaction. After the card read step is dismissed,
/// the SDK will automatically invoke the result callback defined in this handler.
///
- (void)startTransactionWithRequest:(PEPaymentRequest * _Nonnull)request transactionResultViewController:(PETransactionResultViewController * _Nullable)transactionResultViewController;
- (void)cancelTransaction;
- (GetTransactionsResponse * _Nullable)getTransactionsWithPage:(NSInteger)page queryParams:(NSDictionary<NSString *, NSString *> * _Nonnull)queryParams error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Version Number
/// Return the SDK version number
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionNumber;)
+ (NSString * _Nonnull)versionNumber SWIFT_WARN_UNUSED_RESULT;
/// Show merchant tutorial sheet
+ (void)showMerchantTutorial;
/// Toggle transaction mode
/// \param block indicates processing or pause
///
+ (void)blockIncomingTransaction:(BOOL)block;
/// Upload push notification token
/// This is an internal method for PE only. You shouldn’t use this
+ (void)uploadFCMTokenWithToken:(NSString * _Nonnull)token;
/// Clear app data and generate new unique deviceID
/// For testing purpose only in case you want to regenerate a new unique device ID to pair
+ (void)clearData;
@end



@interface PEPaymentDevice (SWIFT_EXTENSION(PEDevicePaymentSDK)) <PEInitializationDelegate>
- (void)onInitializedWithAvailableDevices:(NSArray<id <PEDevice>> * _Nonnull)availableDevices;
- (void)onInitFailedWithError:(NSError * _Nonnull)error;
- (void)onActivationRequiredWithActivationCode:(NSString * _Nonnull)activationCode;
- (void)onActivationStartingWithTerminalInfo:(TerminalInfo * _Nonnull)terminalInfo;
- (void)willLaunchEducationalScreen;
- (void)didLaunchEducationalScreen;
- (void)onEducationScreenDismissed;
- (void)onDeinitialized;
@end


@interface PEPaymentDevice (SWIFT_EXTENSION(PEDevicePaymentSDK)) <PEDeviceDelegate>
- (void)onDeviceSelectedWithDevice:(id <PEDevice> _Nonnull)device;
- (void)onActivationProgressWithDevice:(id <PEDevice> _Nonnull)device completed:(NSInteger)completed;
- (void)onConnectedWithDevice:(id <PEDevice> _Nonnull)device;
- (void)onConnectionFailedWithDevice:(id <PEDevice> _Nonnull)device error:(NSError * _Nonnull)error;
- (void)onCardReadWithSuccess:(BOOL)success;
- (void)onDiscoveringDevice:(BOOL)searching;
- (void)onDeviceDiscovered:(DiscoverableDevice * _Nonnull)device;
- (void)onLcdConfirmation:(NSString * _Nonnull)message;
- (void)onLcdMessage:(NSString * _Nonnull)message;
- (void)didStartTransaction:(PEPaymentRequest * _Nonnull)request;
- (void)didStartAuthorization:(PEPaymentRequest * _Nonnull)request;
- (void)onTransactionCompletedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
- (void)onTransactionFailedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
@end

enum PETransactionType : NSInteger;

/// A class representing a payment request.
/// This class encapsulates the necessary information for a payment request, including the transaction amount, currency code, and optional transaction data.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK16PEPaymentRequest")
@interface PEPaymentRequest : NSObject
/// Initializes a new payment request with the specified transaction amount, transaction data, and currency code.
/// \param transactionAmount The amount of the transaction.
///
/// \param currencyCode The currency code for the transaction
///
- (nonnull instancetype)initWithTransactionAmount:(NSDecimal)transactionAmount currencyCode:(NSString * _Nonnull)currencyCode OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new payment request with the specified transaction type, amount, original transaction ID, transaction data, and currency code.
/// \param transactionType The type of transaction (e.g. sale, refund, etc.).
///
/// \param transactionAmount The amount of the transaction.
///
/// \param originalTransactionId The original transaction ID, if applicable.
///
/// \param currencyCode The currency code for the transaction.
///
- (nonnull instancetype)initWithTransactionType:(enum PETransactionType)transactionType transactionAmount:(NSDecimal)transactionAmount originalTransactionId:(NSString * _Nonnull)originalTransactionId currencyCode:(NSString * _Nonnull)currencyCode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PaymentResultHostReport;

/// A protocol defining the interface for a payment result.
/// This protocol provides properties to access the details of a payment result.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK15PEPaymentResult_")
@protocol PEPaymentResult
/// The type of transaction (e.g., sale, refund, etc.).
@property (nonatomic) enum PETransactionType transactionType;
/// Indicates whether the payment was successful.
@property (nonatomic, readonly) BOOL isSuccess;
/// The ID of the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
/// The response code from the host.
@property (nonatomic, readonly, copy) NSString * _Nullable responseCode;
/// The response message from the host.
@property (nonatomic, readonly, copy) NSString * _Nullable responseMessage;
/// The amount of the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable amount;
/// The currency code for the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
/// PayEngine gateway used for this transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable gatewayId;
/// Device Id of the terminal used for this transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
/// PayEngine card token
@property (nonatomic, readonly, copy) NSString * _Nullable token;
/// Internal transaction ID
@property (nonatomic, readonly, copy) NSString * _Nullable internalTransactionId;
/// The host report for the transaction.
@property (nonatomic, readonly, strong) PaymentResultHostReport * _Nullable hostReport;
/// The error that occurred during the transaction, if any.
@property (nonatomic, readonly, strong) PECardReaderError * _Nullable error;
@end


/// A result handler used to receive a callback when a transaction result is dismissed.
/// This class is used to observe the end of a transaction flow. It provides a callback
/// that is triggered after the transaction UI is dismissed. Despite its name, it is <em>not</em>
/// a subclass of <code>UIViewController</code>.
/// Use this to perform custom actions (e.g., navigate or update UI) after the user finishes
/// interacting with the transaction UI.
/// note:
/// The <code>onDismissed</code> closure is invoked automatically when the SDK finishes presenting
/// any transaction-related UI.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK33PETransactionResultViewController")
@interface PETransactionResultViewController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PETransactionType, open) {
  PETransactionTypeSALE = 1,
  PETransactionTypeREFUND = 5,
  PETransactionTypeVOID = 6,
  PETransactionTypeVERIFICATION = 7,
  PETransactionTypeBALANCE = 8,
};


/// A class representing the host report for a payment transaction.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK23PaymentResultHostReport")
@interface PaymentResultHostReport : NSObject
/// The status of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
/// The response code from the host.
@property (nonatomic, readonly, copy) NSString * _Nonnull responseCode;
/// The response message from the host.
@property (nonatomic, readonly, copy) NSString * _Nonnull responseMessage;
/// The authorization code for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable authCode;
/// The address verification code for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable addressVerificationCode;
/// The card holder verification code for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable cardHolderVerificationCode;
/// The type of card used for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
/// The masked card number for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// The timestamp of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable transactionTimestamp;
/// The ID of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable transactionID;
/// The host reference number for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable hostReferenceNumber;
/// The amount of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nonnull transactionAmount;
/// The processed amount of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nonnull processedAmount;
/// The currency code for the payment transaction.
@property (nonatomic, copy) NSString * _Nullable currencyCode;
/// The issuer response code for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable issuerResponseCode;
/// The ICC ARPC for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable iccARPC;
/// The ICC issuer script for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable iccIssuerScript;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class representing information about a mobile terminal.
/// Once the device is succesfully connected this information will be returned in
SWIFT_CLASS("_TtC18PEDevicePaymentSDK12TerminalInfo")
@interface TerminalInfo : NSObject
- (nonnull instancetype)initWithDeviceId:(NSString * _Nonnull)deviceId merchantId:(NSString * _Nonnull)merchantId merchantName:(NSString * _Nonnull)merchantName terminalFriendlyName:(NSString * _Nonnull)terminalFriendlyName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum representing the different modes of transaction processing.
/// This enum provides cases for all transactions, companion transactions, and device transactions.
typedef SWIFT_ENUM(NSInteger, TransactionMode, open) {
/// All transactions, regardless of type.
  TransactionModeAll = 0,
/// Companion transactions, which are processed through a companion device
  TransactionModeCompanion = 1,
/// Default option. Device transactions, which are processed directly through a payment device.
  TransactionModeDevice = 2,
};









#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef PEDEVICEPAYMENTSDK_SWIFT_H
#define PEDEVICEPAYMENTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PEDevicePaymentSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
/// An enum representing the different types of payment devices.
/// This enum provides cases for Bluetooth, USB, and Tap To Pay devices.
typedef SWIFT_ENUM(NSInteger, DeviceType, open) {
/// A Bluetooth payment device.
  DeviceTypeBT = 0,
/// A USB payment device.
  DeviceTypeUSB = 1,
/// A Tap To Pay payment device.
  DeviceTypeMOBILE = 2,
};


/// Represents a discoverable payment device that can be connected to.
/// This class contains basic information about a device that has been discovered
/// during the device scanning process.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK18DiscoverableDevice")
@interface DiscoverableDevice : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents the response structure for fetching transactions
/// note:
/// This class conforms to <code>NSObject</code>, <code>Codable</code> for Objective-C compatibility and JSON encoding/decoding
SWIFT_CLASS("_TtC18PEDevicePaymentSDK23GetTransactionsResponse")
@interface GetTransactionsResponse : NSObject
@end

/// An enum representing the different types of IDs used for payment processing.
/// This enum provides cases for PayEngine Merchant ID, NMI Security Key, and Processor Merchant ID.
typedef SWIFT_ENUM(NSInteger, IDType, open) {
/// A PayEngine Merchant ID.
  IDTypePE_MID = 0,
/// A Processor Merchant ID.
  IDTypePROCESSOR_MID = 1,
};

@class NSString;
@class NSData;

SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK14IPEEnvironment_")
@protocol IPEEnvironment
@property (nonatomic, readonly, copy) NSString * _Nonnull socketHostname;
@property (nonatomic, readonly, copy) NSString * _Nonnull apiHostname;
@optional
- (NSData * _Nullable)getCustomClientCertificate SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents an LCD display option with selection type and display text
SWIFT_CLASS("_TtC18PEDevicePaymentSDK9LcdOption")
@interface LcdOption : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








/// Represents errors that occur during card reader operations
SWIFT_CLASS("_TtC18PEDevicePaymentSDK17PECardReaderError")
@interface PECardReaderError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TransactionMode : NSInteger;
@protocol PEInitializationDelegate;
@protocol PEDeviceDelegate;
@class PEPaymentRequest;
@class PETransactionResultViewController;

/// A protocol defining the interface for a payment device.
/// This protocol provides methods for initializing, connecting, and interacting with a payment device.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK8PEDevice_")
@protocol PEDevice
/// The type of payment device (e.g., TTP, Bluetooth, USB)
@property (nonatomic, readonly) enum DeviceType deviceType;
/// Unique identifier for the connected device once it’s connected to the backend
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
/// Indicates whether the device is currently connected
@property (nonatomic, readonly) BOOL connected;
/// Initializes device instance.
/// Establishes a connection between the app and PayEngine System by performing the following steps:
/// <ol>
///   <li>
///     Checks if the Merchant ID (MID) and device are correctly paired. If paired, proceeds to step 3; otherwise, proceeds to step 2.
///   </li>
///   <li>
///     Either generates an error (e.g., if the wrong MID is provided) or pairs the device by automatically pairing or providing an activation code to the merchant.
///   </li>
///   <li>
///     Initializes the correct device type (TTP, BT, or USB).
///   </li>
///   <li>
///     Selects the correct device and establishes a connection.
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     license: <em>Deprecated</em> License string obtained from PayEngine support.
///   </li>
///   <li>
///     id: Merchant ID.
///   </li>
///   <li>
///     idType: Merchant ID type.
///   </li>
///   <li>
///     mode: Transaction mode.
///   </li>
///   <li>
///     autoConnect:
///   </li>
///   <li>
///     delegate: Delegate to receive initialization callbacks.
///   </li>
/// </ul>
- (void)initializeWithLicense:(NSString * _Nullable)license id:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("license is no longer needed. Use initialize(id:idType:mode:delegate:)");
/// Initializes device instance.
/// Establishes a connection between the app and PayEngine System by performing the following steps:
/// <ol>
///   <li>
///     Checks if the Merchant ID (MID) and device are correctly paired. If paired, proceeds to step 3; otherwise, proceeds to step 2.
///   </li>
///   <li>
///     Either generates an error (e.g., if the wrong MID is provided) or pairs the device by automatically pairing or providing an activation code to the merchant.
///   </li>
///   <li>
///     Initializes the correct device type (TTP, BT, or USB).
///   </li>
///   <li>
///     Selects the correct device and establishes a connection.
///   </li>
/// </ol>
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     id: Merchant ID.
///   </li>
///   <li>
///     idType: Merchant ID type.
///   </li>
///   <li>
///     mode: Transaction mode.
///   </li>
///   <li>
///     autoConnect:
///   </li>
///   <li>
///     delegate: Delegate to receive initialization callbacks.
///   </li>
/// </ul>
- (void)initializeWithId:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate;
/// <code>connect</code> method’s main job is to initiate the connection between the app and chosen device type.
/// Generally this will prepare the terminal TTP or BT/USB device to be ready for transaction processing.
/// \param delegate Delegate to receive initialization callbacks.
///
- (void)connectWithDelegate:(id <PEDeviceDelegate> _Nonnull)delegate;
- (void)deinitialize;
/// Start a new Transaction
/// <code>startTransaction</code> method’s purpose is to start the transaction whether through a push or an in app request
/// \param request Payment Request
///
/// \param transactionResultViewController A result handler used to receive a callback when a transaction result is dismissed.
///
- (void)startTransactionWithRequest:(PEPaymentRequest * _Nonnull)request transactionResultViewController:(PETransactionResultViewController * _Nullable)transactionResultViewController;
/// Cancel the currently active transaction
- (void)cancelTransaction;
/// Select a nearby device
/// <code>selectDevice</code> method is to select and connect to a device
/// <ul>
///   <li>
///     Parameter
///     <ul>
///       <li>
///         device: DiscoverableDevice
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)selectDeviceWithDevice:(DiscoverableDevice * _Nonnull)device;
- (void)selectLcdOptionWithValue:(uint8_t)value;
@end

@protocol PEPaymentResult;

/// The <code>PEDeviceDelegate</code> interface defines the protocol that a delegate class must adopt to receive messages related to transaction processing from devices. This interface is essential for classes that manage communication and interaction with transaction processing devices, enabling them to respond appropriately to various device events and states, such as transaction progress, errors, and completion.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK16PEDeviceDelegate_")
@protocol PEDeviceDelegate
/// The <code>onDeviceSelected</code> delegate callback is triggered when a device is selected
/// \param device Selected device
///
- (void)onDeviceSelectedWithDevice:(id <PEDevice> _Nonnull)device;
@optional
/// The <code>onActivationProgress</code> method is a delegate callback used to inform the delegate about the progress of a device activation process.
/// \param device Selected device
///
/// \param completed Percent completed
///
- (void)onActivationProgressWithDevice:(id <PEDevice> _Nonnull)device completed:(NSInteger)completed;
@required
/// The <code>onConnected</code> method is a delegate callback is invoked when a device is connected
/// \param device connected device
///
- (void)onConnectedWithDevice:(id <PEDevice> _Nonnull)device;
/// The <code>onConnectionFailed</code> method is a delegate callback to notify the delegate about connection errors
/// \param device Selected device
///
/// \param error Connection error
///
- (void)onConnectionFailedWithDevice:(id <PEDevice> _Nonnull)device error:(NSError * _Nonnull)error;
@optional
/// <code>onCardRead</code> callback notifies the delegate about the card read operation success or failure
/// \param success True if the card reader operation is completed successfully. False otherwise
///
- (void)onCardReadWithSuccess:(BOOL)success;
/// <code>onDiscoveringDevice</code> is a delegate callback that notifies the device when BT device search starts and end
/// \param searching True when searching, false otherwise
///
- (void)onDiscoveringDevice:(BOOL)searching;
/// <code>onDeviceDiscovered</code> is triggered when a device is discovered during search
/// \param device Discovered device
///
- (void)onDeviceDiscovered:(DiscoverableDevice * _Nonnull)device;
/// <code>onLcdConfirmation</code> is a delegate callback
/// \param message message
///
- (void)onLcdConfirmation:(NSString * _Nonnull)message;
/// <code>onLcdMessage</code> message delegate callback is a method that is used to notify delegate about the LCD message from device
/// \param message message
///
- (void)onLcdMessage:(NSString * _Nonnull)message;
/// <code>didStartTransaction</code> is a delegate callback to notify the delegate when a transaction request received
- (void)didStartTransaction:(PEPaymentRequest * _Nonnull)request;
/// <code>didStartAuthorization</code> is a delegate callback to notify the delegate when a transaction authorization begins
- (void)didStartAuthorization:(PEPaymentRequest * _Nonnull)request;
@required
/// <code>onTransactionCompleted</code> is a delegate callback to notify the delegate when a transaction processing is completed
/// \param transaction Completed Transaction <code>PEPaymentResult</code>
///
- (void)onTransactionCompletedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
/// <code>onTransactionFailed</code> is delegate callback that is invoked to report back any transaction processing error.
/// \param transaction Failed Transaction <code>PEPaymentResult</code>
///
- (void)onTransactionFailedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
@end


/// A class representing different environments for an application.
/// This class provides a set of predefined environments, including Production, Sandbox, and Test.
/// Each environment conforms to the <code>IPEEnvironment</code> protocol, ensuring consistency across different environments.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK13PEEnvironment")
@interface PEEnvironment : NSObject
/// Representing the production environment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <IPEEnvironment> _Nonnull Production;)
+ (id <IPEEnvironment> _Nonnull)Production SWIFT_WARN_UNUSED_RESULT;
/// Representing the sandbox environment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <IPEEnvironment> _Nonnull Sandbox;)
+ (id <IPEEnvironment> _Nonnull)Sandbox SWIFT_WARN_UNUSED_RESULT;
/// Representing the test environment.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <IPEEnvironment> _Nonnull Test;)
+ (id <IPEEnvironment> _Nonnull)Test SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TerminalInfo;

/// The <code>PEInitializationDelegate</code> interface defines a core set of callbacks that are invoked to notify the delegate about the progress and completion of application initialization and activation processes.
/// This interface is crucial for classes that need to respond to the application’s lifecycle events, such as setup completion, activation, and potential errors that may occur during the initialization phase.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK24PEInitializationDelegate_")
@protocol PEInitializationDelegate
/// <code>onInitialized</code> callback is used to notify delegate about the initialization completed with list of available device interfaces
/// \param availableDevices Available devices (e.g. Apple Tap to Pay on iPhone or  IDTech USB and Bluetooth devices
///
- (void)onInitializedWithAvailableDevices:(NSArray<id <PEDevice>> * _Nonnull)availableDevices;
/// <code>onInitFailed</code> Notifies the delegate about initialization failures
/// \param error Error description of the failure.
///
- (void)onInitFailedWithError:(NSError * _Nonnull)error;
@optional
/// <code>onActivationRequired</code> is triggered to notify the delegate that application activation is required before any available device interfaces can be used to process payment
/// \param activationCode Activation Code
///
- (void)onActivationRequiredWithActivationCode:(NSString * _Nonnull)activationCode;
/// <code>onActivationStarting</code> is triggered when the activation process is about to start
/// \param terminalInfo <code>TerminalInfo</code> Registered terminal info. Provide terminal information generally for display purposes.
///
- (void)onActivationStartingWithTerminalInfo:(TerminalInfo * _Nonnull)terminalInfo;
/// Notifies when educational screens will be presented to merchant
- (void)willLaunchEducationalScreen;
/// Notifies when educations screens have been presented to merchant
- (void)didLaunchEducationalScreen;
/// When educational screens have been dismissed
- (void)onEducationScreenDismissed;
@required
/// Gets invoked once the sdk has been successfully deinitialized
- (void)onDeinitialized;
@end


/// <code>PEPaymentDevice</code> is the core class for handling payment device interactions in the PayEngine SDK.
/// This class provides:
/// <ul>
///   <li>
///     Device connection management
///   </li>
///   <li>
///     Transaction processing (sales, refunds, voids, etc.)
///   </li>
///   <li>
///     Device initialization and configuration
///   </li>
///   <li>
///     Error handling and event delegation
///   </li>
/// </ul>
/// <h2>Key Features</h2>
/// <h3>Device Management</h3>
/// <ul>
///   <li>
///     Supports multiple device types (mobile, BT, USB)
///   </li>
///   <li>
///     Handles device discovery and selection
///   </li>
///   <li>
///     Manages device connections and disconnections
///   </li>
/// </ul>
/// <h3>Transaction Processing</h3>
/// <ul>
///   <li>
///     Supports various transaction types:
///     <ul>
///       <li>
///         Sale
///       </li>
///       <li>
///         Refund
///       </li>
///       <li>
///         Void
///       </li>
///       <li>
///         Balance Inquiry
///       </li>
///       <li>
///         Verification
///       </li>
///     </ul>
///   </li>
///   <li>
///     Handles transaction lifecycle from start to completion
///   </li>
///   <li>
///     Provides real-time transaction status updates
///   </li>
/// </ul>
/// <h3>Error Handling</h3>
/// <ul>
///   <li>
///     Comprehensive error reporting through delegates
///   </li>
///   <li>
///     Automatic reconnection attempts
///   </li>
///   <li>
///     Error message parsing and translation
///   </li>
/// </ul>
/// <h3>Delegates</h3>
/// <ul>
///   <li>
///     <code>PEInitializationDelegate</code> for initialization callbacks
///   </li>
///   <li>
///     <code>PEDeviceDelegate</code> for device and transaction events
///   </li>
/// </ul>
/// <h2>Usage Example</h2>
/// \code
/// // Initialize the payment device
/// PEPaymentDevice.shared.initialize(id: "MERCHANT_ID", 
///                                 idType: .PE_MID, 
///                                 delegate: self)
///
/// // Connect to a device
/// PEPaymentDevice.shared.connect(delegate: self)
///
/// // Start a sale transaction
/// let request = PEPaymentRequest(transactionAmount: 10.00, 
///                              currencyCode: "USD", 
///                              type: .SALE)
///
/// PEPaymentDevice.shared.startTransaction(request: request)
///
/// \endcode<h2>Important Notes</h2>
/// seealso:
/// <code>PEDevice</code>, <code>PEInitializationDelegate</code>, <code>PEDeviceDelegate</code>
/// <ul>
///   <li>
///     The class is implemented as a singleton (<code>shared</code> instance)
///   </li>
///   <li>
///     All operations should be performed on the main thread
///   </li>
///   <li>
///     Device connections are automatically managed
///   </li>
///   <li>
///     Transactions can be blocked using <code>blockIncomingTransaction(_:)</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC18PEDevicePaymentSDK15PEPaymentDevice")
@interface PEPaymentDevice : NSObject <PEDevice>
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
@property (nonatomic, readonly) BOOL connected;
/// Shared instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PEPaymentDevice * _Nonnull shared;)
+ (PEPaymentDevice * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(PEPaymentDevice * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <IPEEnvironment> _Nonnull environment;)
+ (id <IPEEnvironment> _Nonnull)environment SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnvironment:(id <IPEEnvironment> _Nonnull)value;
@property (nonatomic) enum DeviceType deviceType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes device instance
/// \param id Merchant ID
///
/// \param idType Merchant ID type
///
/// \param mode Companion mode whether the transaction is allowed to initiated via API or just from device
///
/// \param delegate Delegate to receive initialization callbacks
///
- (void)initializeWithId:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate;
/// Initializes device instance
/// \param license License string obtained from PayEngine support
///
/// \param id Merchant ID
///
/// \param idType Merchant ID type
///
/// \param mode Companion mode whether the transaction is allowed to initiated via API or just from device
///
/// \param delegate Delegate to receive initialization callbacks
///
- (void)initializeWithLicense:(NSString * _Nullable)license id:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate SWIFT_DEPRECATED_MSG("license is no longer needed. Use initialize(id:idType:mode:delegate:)");
- (void)connectWithDelegate:(id <PEDeviceDelegate> _Nonnull)delegate;
/// Connect to the specific device type
/// \param device Selected device
///
/// \param delegate Device delegate
///
- (void)connectWithDevice:(id <PEDevice> _Nonnull)device delegate:(id <PEDeviceDelegate> _Nonnull)delegate;
/// Deinitializes the SDK, disconnects connected devices, and resets internal state.
/// This method releases all allocated resources, disconnects from the active socket,
/// deinitializes connected devices, and resets the SDK to an uninitialized state.
/// After cleanup, it invokes <code>PEInitializationDelegate/onDeinitialized()</code> and nullifies related delegates.
- (void)deinitialize;
- (void)selectDeviceWithDevice:(DiscoverableDevice * _Nonnull)device;
- (void)selectLcdOptionWithValue:(uint8_t)value;
/// Starts a new payment transaction using the provided request.
/// This method initiates the transaction flow based on the type specified in the <code>PEPaymentRequest</code>,
/// such as sale, refund, verification, or balance inquiry. The transaction is processed using the
/// currently connected device.
/// \param request The payment request containing transaction details.
///
/// \param transactionResultViewController An optional result handler object that, if provided,
/// will be used to handle the completion of the transaction. After the card read step is dismissed,
/// the SDK will automatically invoke the result callback defined in this handler.
///
- (void)startTransactionWithRequest:(PEPaymentRequest * _Nonnull)request transactionResultViewController:(PETransactionResultViewController * _Nullable)transactionResultViewController;
- (void)cancelTransaction;
- (GetTransactionsResponse * _Nullable)getTransactionsWithPage:(NSInteger)page queryParams:(NSDictionary<NSString *, NSString *> * _Nonnull)queryParams error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Version Number
/// Return the SDK version number
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionNumber;)
+ (NSString * _Nonnull)versionNumber SWIFT_WARN_UNUSED_RESULT;
/// Show merchant tutorial sheet
+ (void)showMerchantTutorial;
/// Toggle transaction mode
/// \param block indicates processing or pause
///
+ (void)blockIncomingTransaction:(BOOL)block;
/// Upload push notification token
/// This is an internal method for PE only. You shouldn’t use this
+ (void)uploadFCMTokenWithToken:(NSString * _Nonnull)token;
/// Clear app data and generate new unique deviceID
/// For testing purpose only in case you want to regenerate a new unique device ID to pair
+ (void)clearData;
@end



@interface PEPaymentDevice (SWIFT_EXTENSION(PEDevicePaymentSDK)) <PEInitializationDelegate>
- (void)onInitializedWithAvailableDevices:(NSArray<id <PEDevice>> * _Nonnull)availableDevices;
- (void)onInitFailedWithError:(NSError * _Nonnull)error;
- (void)onActivationRequiredWithActivationCode:(NSString * _Nonnull)activationCode;
- (void)onActivationStartingWithTerminalInfo:(TerminalInfo * _Nonnull)terminalInfo;
- (void)willLaunchEducationalScreen;
- (void)didLaunchEducationalScreen;
- (void)onEducationScreenDismissed;
- (void)onDeinitialized;
@end


@interface PEPaymentDevice (SWIFT_EXTENSION(PEDevicePaymentSDK)) <PEDeviceDelegate>
- (void)onDeviceSelectedWithDevice:(id <PEDevice> _Nonnull)device;
- (void)onActivationProgressWithDevice:(id <PEDevice> _Nonnull)device completed:(NSInteger)completed;
- (void)onConnectedWithDevice:(id <PEDevice> _Nonnull)device;
- (void)onConnectionFailedWithDevice:(id <PEDevice> _Nonnull)device error:(NSError * _Nonnull)error;
- (void)onCardReadWithSuccess:(BOOL)success;
- (void)onDiscoveringDevice:(BOOL)searching;
- (void)onDeviceDiscovered:(DiscoverableDevice * _Nonnull)device;
- (void)onLcdConfirmation:(NSString * _Nonnull)message;
- (void)onLcdMessage:(NSString * _Nonnull)message;
- (void)didStartTransaction:(PEPaymentRequest * _Nonnull)request;
- (void)didStartAuthorization:(PEPaymentRequest * _Nonnull)request;
- (void)onTransactionCompletedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
- (void)onTransactionFailedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
@end

enum PETransactionType : NSInteger;

/// A class representing a payment request.
/// This class encapsulates the necessary information for a payment request, including the transaction amount, currency code, and optional transaction data.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK16PEPaymentRequest")
@interface PEPaymentRequest : NSObject
/// Initializes a new payment request with the specified transaction amount, transaction data, and currency code.
/// \param transactionAmount The amount of the transaction.
///
/// \param currencyCode The currency code for the transaction
///
- (nonnull instancetype)initWithTransactionAmount:(NSDecimal)transactionAmount currencyCode:(NSString * _Nonnull)currencyCode OBJC_DESIGNATED_INITIALIZER;
/// Initializes a new payment request with the specified transaction type, amount, original transaction ID, transaction data, and currency code.
/// \param transactionType The type of transaction (e.g. sale, refund, etc.).
///
/// \param transactionAmount The amount of the transaction.
///
/// \param originalTransactionId The original transaction ID, if applicable.
///
/// \param currencyCode The currency code for the transaction.
///
- (nonnull instancetype)initWithTransactionType:(enum PETransactionType)transactionType transactionAmount:(NSDecimal)transactionAmount originalTransactionId:(NSString * _Nonnull)originalTransactionId currencyCode:(NSString * _Nonnull)currencyCode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PaymentResultHostReport;

/// A protocol defining the interface for a payment result.
/// This protocol provides properties to access the details of a payment result.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK15PEPaymentResult_")
@protocol PEPaymentResult
/// The type of transaction (e.g., sale, refund, etc.).
@property (nonatomic) enum PETransactionType transactionType;
/// Indicates whether the payment was successful.
@property (nonatomic, readonly) BOOL isSuccess;
/// The ID of the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
/// The response code from the host.
@property (nonatomic, readonly, copy) NSString * _Nullable responseCode;
/// The response message from the host.
@property (nonatomic, readonly, copy) NSString * _Nullable responseMessage;
/// The amount of the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable amount;
/// The currency code for the transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
/// PayEngine gateway used for this transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable gatewayId;
/// Device Id of the terminal used for this transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
/// PayEngine card token
@property (nonatomic, readonly, copy) NSString * _Nullable token;
/// Internal transaction ID
@property (nonatomic, readonly, copy) NSString * _Nullable internalTransactionId;
/// The host report for the transaction.
@property (nonatomic, readonly, strong) PaymentResultHostReport * _Nullable hostReport;
/// The error that occurred during the transaction, if any.
@property (nonatomic, readonly, strong) PECardReaderError * _Nullable error;
@end


/// A result handler used to receive a callback when a transaction result is dismissed.
/// This class is used to observe the end of a transaction flow. It provides a callback
/// that is triggered after the transaction UI is dismissed. Despite its name, it is <em>not</em>
/// a subclass of <code>UIViewController</code>.
/// Use this to perform custom actions (e.g., navigate or update UI) after the user finishes
/// interacting with the transaction UI.
/// note:
/// The <code>onDismissed</code> closure is invoked automatically when the SDK finishes presenting
/// any transaction-related UI.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK33PETransactionResultViewController")
@interface PETransactionResultViewController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, PETransactionType, open) {
  PETransactionTypeSALE = 1,
  PETransactionTypeREFUND = 5,
  PETransactionTypeVOID = 6,
  PETransactionTypeVERIFICATION = 7,
  PETransactionTypeBALANCE = 8,
};


/// A class representing the host report for a payment transaction.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK23PaymentResultHostReport")
@interface PaymentResultHostReport : NSObject
/// The status of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
/// The response code from the host.
@property (nonatomic, readonly, copy) NSString * _Nonnull responseCode;
/// The response message from the host.
@property (nonatomic, readonly, copy) NSString * _Nonnull responseMessage;
/// The authorization code for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable authCode;
/// The address verification code for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable addressVerificationCode;
/// The card holder verification code for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable cardHolderVerificationCode;
/// The type of card used for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable cardType;
/// The masked card number for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable maskedCardNumber;
/// The timestamp of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable transactionTimestamp;
/// The ID of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable transactionID;
/// The host reference number for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable hostReferenceNumber;
/// The amount of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nonnull transactionAmount;
/// The processed amount of the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nonnull processedAmount;
/// The currency code for the payment transaction.
@property (nonatomic, copy) NSString * _Nullable currencyCode;
/// The issuer response code for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable issuerResponseCode;
/// The ICC ARPC for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable iccARPC;
/// The ICC issuer script for the payment transaction.
@property (nonatomic, readonly, copy) NSString * _Nullable iccIssuerScript;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class representing information about a mobile terminal.
/// Once the device is succesfully connected this information will be returned in
SWIFT_CLASS("_TtC18PEDevicePaymentSDK12TerminalInfo")
@interface TerminalInfo : NSObject
- (nonnull instancetype)initWithDeviceId:(NSString * _Nonnull)deviceId merchantId:(NSString * _Nonnull)merchantId merchantName:(NSString * _Nonnull)merchantName terminalFriendlyName:(NSString * _Nonnull)terminalFriendlyName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enum representing the different modes of transaction processing.
/// This enum provides cases for all transactions, companion transactions, and device transactions.
typedef SWIFT_ENUM(NSInteger, TransactionMode, open) {
/// All transactions, regardless of type.
  TransactionModeAll = 0,
/// Companion transactions, which are processed through a companion device
  TransactionModeCompanion = 1,
/// Default option. Device transactions, which are processed directly through a payment device.
  TransactionModeDevice = 2,
};









#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
