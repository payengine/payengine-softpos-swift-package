#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef PEDEVICEPAYMENTSDK_SWIFT_H
#define PEDEVICEPAYMENTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PEDevicePaymentSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM(NSInteger, DeviceType, open) {
  DeviceTypeBT = 0,
  DeviceTypeUSB = 1,
  DeviceTypeMOBILE = 2,
};


SWIFT_CLASS("_TtC18PEDevicePaymentSDK18DiscoverableDevice")
@interface DiscoverableDevice : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IDType, open) {
  IDTypePE_MID = 0,
  IDTypeNMI_SECURITY_KEY = 1,
  IDTypePROCESSOR_MID = 2,
};

@class NSString;

SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK14IPEEnvironment_")
@protocol IPEEnvironment
@property (nonatomic, readonly, copy) NSString * _Nonnull socketHostname;
@property (nonatomic, readonly, copy) NSString * _Nonnull apiHostname;
@end


SWIFT_CLASS("_TtC18PEDevicePaymentSDK9LcdOption")
@interface LcdOption : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS("_TtC18PEDevicePaymentSDK17PECardReaderError")
@interface PECardReaderError : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum TransactionMode : NSInteger;
@protocol PEInitializationDelegate;
@protocol PEDeviceDelegate;
@class PEPaymentRequest;

SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK8PEDevice_")
@protocol PEDevice
@property (nonatomic, readonly) enum DeviceType deviceType;
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
@property (nonatomic, readonly) BOOL connected;
/// Initializes device instance
/// \param license License string obtained from PayEngine support
///
/// \param id Merchant ID
///
/// \param idType Merchant ID type
///
/// \param mode Transaction mode
///
/// \param delegate Delegate to receive initialization callbacks
///
- (void)initializeWithLicense:(NSString * _Nonnull)license id:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate;
/// <code>connect</code> method’s main job is to initiate the connection between the app and chosen device type.
/// Generally this will prepare the terminal TTP or BT/USB device to be ready for transaction processing.
/// Connect to a device
/// \param delegate Device delegate
///
- (void)connectWithDelegate:(id <PEDeviceDelegate> _Nonnull)delegate;
/// <code>startTransaction</code> method’s purpose is to start the transaction whether through a push or an in app request
/// Start a new Transaction
/// \param request Payment Request
///
- (void)startTransactionWithRequest:(PEPaymentRequest * _Nonnull)request;
/// Cancel the currently active transaction
- (void)cancelTransaction;
/// <code>selectDevice</code> method is to select and connect to a device
/// Select a nearby device
/// \param device DiscoverableDevice
///
- (void)selectDeviceWithDevice:(DiscoverableDevice * _Nonnull)device;
- (void)selectLcdOptionWithValue:(uint8_t)value;
@end

@protocol PEPaymentResult;

/// he <code>PEDeviceDelegate</code> interface defines the protocol that a delegate class must adopt to receive messages related to transaction processing from devices. This interface is essential for classes that manage communication and interaction with transaction processing devices, enabling them to respond appropriately to various device events and states, such as transaction progress, errors, and completion.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK16PEDeviceDelegate_")
@protocol PEDeviceDelegate
/// The <code>onDeviceSelected</code> delegate callback is triggered when a device is selected
/// \param device Selected device
///
- (void)onDeviceSelectedWithDevice:(id <PEDevice> _Nonnull)device;
/// The <code>onActivationProgress</code> method is a delegate callback used to inform the delegate about the progress of a device activation process.
/// \param device Selected device
///
/// \param completed Percent completed
///
- (void)onActivationProgressWithDevice:(id <PEDevice> _Nonnull)device completed:(NSInteger)completed;
/// The <code>onConnected</code> method is a delegate callback is invoked when a device is connected
/// \param device connected device
///
- (void)onConnectedWithDevice:(id <PEDevice> _Nonnull)device;
/// The <code>onConnectionFailed</code> method is a delegate callback to notify the delegate about connection errors
/// \param device Selected device
///
/// \param error Connection error
///
- (void)onConnectionFailedWithDevice:(id <PEDevice> _Nonnull)device error:(NSError * _Nonnull)error;
/// <code>onCardRead</code> callback notifies the delegate about the card read operation success or failure
/// \param success True if the card reader operation is completed successfully. False otherwise
///
- (void)onCardReadWithSuccess:(BOOL)success;
/// <code>onDiscoveringDevice</code> is a delegate callback that notifies the device when BT device search starts and end
/// \param searching True when searching, false otherwise
///
- (void)onDiscoveringDevice:(BOOL)searching;
/// <code>onDeviceDiscovered</code> is triggered when a device is discovered during search
/// \param device Discovered device
///
- (void)onDeviceDiscovered:(DiscoverableDevice * _Nonnull)device;
/// <code>onLcdConfirmation</code> is a delegate callback
/// \param message message
///
- (void)onLcdConfirmation:(NSString * _Nonnull)message;
/// <code>onLcdMessage</code> message delegate callback is a method that is used to notify delegate about the LCD message from device
/// \param message message
///
- (void)onLcdMessage:(NSString * _Nonnull)message;
/// <code>didStartTransaction</code> is a delegate callback to notify the delegate when a transaction request received
- (void)didStartTransaction:(PEPaymentRequest * _Nonnull)request;
/// <code>didStartAuthorization</code> is a delegate callback to notify the delegate when a transaction authorization begins
- (void)didStartAuthorization:(PEPaymentRequest * _Nonnull)request;
/// <code>onTransactionCompleted</code> is a delegate callback to notify the delegate when a transaction processing is completed
/// \param transaction Completed Transaction <code>PEPaymentResult</code>
///
- (void)onTransactionCompletedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
/// <code>onTransactionFailed</code> is delegate callback that is invoked to report back any transaction processing error.
/// \param transaction Failed Transaction <code>PEPaymentResult</code>
///
- (void)onTransactionFailedWithTransaction:(id <PEPaymentResult> _Nonnull)transaction;
@end

typedef SWIFT_ENUM(NSInteger, PEDeviceType, open) {
  PEDeviceTypeSIMULATOR = 0,
  PEDeviceTypeLIVE = 1,
};

@class TerminalInfo;

/// The <code>PEInitializationDelegate</code> interface defines a core set of callbacks that are invoked to notify the delegate about the progress and completion of application initialization and activation processes.
/// This interface is crucial for classes that need to respond to the application’s lifecycle events, such as setup completion, activation, and potential errors that may occur during the initialization phase.
SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK24PEInitializationDelegate_")
@protocol PEInitializationDelegate
/// <code>onInitialized</code> callback is used to notify delegate about the initialization completed with list of available device interfaces
/// \param availableDevices Available devices (e.g. Apple Tap to Pay on iPhone or  IDTech USB and Bluetooth devices
///
- (void)onInitializedWithAvailableDevices:(NSArray<id <PEDevice>> * _Nonnull)availableDevices;
/// <code>onInitFailed</code> Notifies the delegate about initialization failures
/// \param error Error description of the failure.
///
- (void)onInitFailedWithError:(NSError * _Nonnull)error;
/// <code>onActivationRequired</code> is triggered to notify the delegate that application activation is required before any available device interfaces can be used to process payment
/// \param activationCode Activation Code
///
- (void)onActivationRequiredWithActivationCode:(NSString * _Nonnull)activationCode;
/// <code>onActivationStarting</code> is triggered when the activation process is about to start
/// \param terminalInfo <code>TerminalInfo</code> Registered terminal info. Provide terminal information generally for display purposes.
///
- (void)onActivationStartingWithTerminalInfo:(TerminalInfo * _Nonnull)terminalInfo;
@optional
/// Notifies when educational screens will be presented to merchant
- (void)willLaunchEducationalScreen;
/// Notifies when educations screens have been presented to merchant
- (void)didLaunchEducationalScreen;
/// When educational screens have been dismissed
- (void)onEducationScreenDismissed;
@end


/// <code>PEPaymentDevice</code> offers a streamlined approach for engaging with the PayEngine device interface.
/// It implements the <code>PEDevice</code>, facilitating easy interaction with payment processing hardware.
SWIFT_CLASS("_TtC18PEDevicePaymentSDK15PEPaymentDevice")
@interface PEPaymentDevice : NSObject <PEDevice>
@property (nonatomic, readonly, copy) NSString * _Nullable deviceId;
@property (nonatomic, readonly) BOOL connected;
/// Shared instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) PEPaymentDevice * _Nonnull shared;)
+ (PEPaymentDevice * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(PEPaymentDevice * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <IPEEnvironment> _Nonnull environment;)
+ (id <IPEEnvironment> _Nonnull)environment SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnvironment:(id <IPEEnvironment> _Nonnull)value;
@property (nonatomic) enum DeviceType deviceType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes device instance
/// \param license License string obtained from PayEngine support
///
/// \param id Merchant ID
///
/// \param idType Merchant ID type
///
/// \param mode Companion mode whether the transaction is allowed to initiated via API or just from device
///
/// \param delegate Delegate to receive initialization callbacks
///
- (void)initializeWithLicense:(NSString * _Nonnull)license id:(NSString * _Nullable)id idType:(enum IDType)idType mode:(enum TransactionMode)mode delegate:(id <PEInitializationDelegate> _Nonnull)delegate;
- (void)connectWithDelegate:(id <PEDeviceDelegate> _Nonnull)delegate;
/// Connect to the specific device type
/// \param device Selected device
///
/// \param delegate Device delegate
///
- (void)connectWithDevice:(id <PEDevice> _Nonnull)device delegate:(id <PEDeviceDelegate> _Nonnull)delegate;
- (void)selectDeviceWithDevice:(DiscoverableDevice * _Nonnull)device;
- (void)selectLcdOptionWithValue:(uint8_t)value;
/// Start new transaction
- (void)startTransactionWithRequest:(PEPaymentRequest * _Nonnull)request;
- (void)cancelTransaction;
@property (nonatomic, readonly, copy) NSString * _Nonnull generalDeviceId;
/// Version Number
/// Return the SDK version number
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionNumber;)
+ (NSString * _Nonnull)versionNumber SWIFT_WARN_UNUSED_RESULT;
/// Show merchant tutorial sheet
+ (void)showMerchantTutorial;
/// Toggle transaction mode
/// \param block indicates processing or pause
///
+ (void)blockIncomingTransaction:(BOOL)block;
/// Upload push notification token
/// This is an internal method for PE only. You shouldn’t use this
+ (void)uploadFCMTokenWithToken:(NSString * _Nonnull)token;
/// Clear app data and generate new unique deviceID
/// For testing purpose only in case you want to regenerate a new unique device ID to pair
+ (void)clearData;
@end



SWIFT_CLASS("_TtC18PEDevicePaymentSDK16PEPaymentRequest")
@interface PEPaymentRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PETransactionType : NSInteger;

SWIFT_PROTOCOL("_TtP18PEDevicePaymentSDK15PEPaymentResult_")
@protocol PEPaymentResult
@property (nonatomic) enum PETransactionType transactionType;
@property (nonatomic, readonly) BOOL isSuccess;
@property (nonatomic, readonly, copy) NSString * _Nullable transactionId;
@property (nonatomic, readonly, copy) NSString * _Nullable responseCode;
@property (nonatomic, readonly, copy) NSString * _Nullable responseMessage;
@property (nonatomic, readonly, copy) NSString * _Nullable amount;
@property (nonatomic, readonly, copy) NSString * _Nullable currencyCode;
@property (nonatomic, readonly, strong) PECardReaderError * _Nullable error;
@end

typedef SWIFT_ENUM(NSInteger, PETransactionType, open) {
  PETransactionTypeSALE = 1,
  PETransactionTypeREFUND = 5,
  PETransactionTypeVOID = 6,
  PETransactionTypeVERIFICATION = 7,
  PETransactionTypeBALANCE = 8,
};

@class PaymentResultData;

SWIFT_CLASS("_TtC18PEDevicePaymentSDK13PaymentResult")
@interface PaymentResult : NSObject
@property (nonatomic, readonly, strong) PaymentResultData * _Nullable data;
@property (nonatomic, readonly, copy) NSString * _Nullable message;
@end


SWIFT_CLASS("_TtC18PEDevicePaymentSDK17PaymentResultData")
@interface PaymentResultData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull ID;
@property (nonatomic, readonly, copy) NSString * _Nonnull MerchantID;
@property (nonatomic, readonly, copy) NSString * _Nonnull TransactionID;
@end


SWIFT_CLASS("_TtC18PEDevicePaymentSDK12TerminalInfo")
@interface TerminalInfo : NSObject
@end

///
typedef SWIFT_ENUM(NSInteger, TransactionMode, open) {
  TransactionModeAll = 0,
  TransactionModeCompanion = 1,
  TransactionModeDevice = 2,
};









#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
